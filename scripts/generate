#!/usr/bin/env php
<?php

define('REL', realpath(dirname(__FILE__) . ".."));

require_once 'config/consts.php';
require_once 'autoload.php';
require_once 'config/environments.php';

// all the diffrent generators & the shortcuts
$generators = Array(
  'controller' => 'ControllerGenerator',
  'ctrl'       => 'ControllerGenerator',
  'c'          => 'ControllerGenerator',
  'model'      => 'ModelGenerator',
  'mod'        => 'ModelGenerator',
  'm'          => 'ModelGenerator',
  'test'       => 'TestGenerator',
  'tst'        => 'TestGenerator',
  't'          => 'TestGenerator'
);

// get all the diffrent classes
$generator_classes = array_unique($generators);
$generators_str = "";

foreach( $generator_classes as $class) {
  // get all the shortcuts 
  $shortcuts = array_keys(array_intersect($generators, array($class)));
  $generators_str .= "\t" . array_shift($shortcuts) . " (" .  implode(", ", $shortcuts) . ")\n";
}

define('HELP', <<<HELP
{$argv[0]} generator_name name [params ...]

generators: 
$generators_str

HELP
);

abstract class Generator {
  protected $files = Array();
  protected $flags = Array('force' => false);

  public function isFlag($key) {
    return array_key_exists($key, $this->flags);
  }

  public function setFlag($key, $value) {
    if(!$this->isFlag($key)) {
      throw new InvalidArgumentException("No such flag '$key'");
    }
    $this->flags[$key] = $value;
  }

  public function getFlag($key) {
    if(!$this->isFlag($key)) {
      throw new InvalidArgumentException("No such flag '$key'");
    }
    return $this->flags[$key];
  }

  public function generate() {
    foreach($this->files as $file => $content) {
      if($content === true) {
        if(!is_dir(ROOT . $file)) {
          echo "creating dir '$file'\n";
          mkdir(ROOT . $file);
        }
      } else {
        if(is_file(ROOT . $file) && !$this->getFlag('force')) {
          throw new BadMethodCallException("file '$file' already exists (use -f to force overwrite)");
        }
        echo "creating '$file'\n";
        file_put_contents(ROOT . $file, $content);
      }
    }
  }
}

class ControllerGenerator extends Generator {
 public function __construct($name, $methods) {
   $name = ucfirst($name);
   $methods = array_merge(array('index'), $methods);
   $methods_string = "";
   foreach($methods as $method) {
     $methods_string .= <<<METHOD

  public function action_{$method}() {
  }
METHOD;
   }
   $this->files["Controllers/{$name}Controller.php"] = <<<CONTROLLER
<?php

namespace Void;

class {$name}Controller extends ControllerBase {
$methods_string

}

CONTROLLER;

    $foldername = strtolower($name);
    $this->files["Views/$foldername"] = true;
    foreach($methods as $method) {
      $this->files["Views/$foldername/$method.tpl"] = "";
    }
  }
}

class ModelGenerator extends Generator {
  public function __construct($name, $params) {
    $name = ucfirst($name);
    $this->files["Models"] = true;
    $this->files["Models/$name.php"] = <<<MODEL
<?php

namespace Void;

class {$name} extends \\ActiveRecord\\Model {
}

MODEL;
  }
}

class TestGenerator extends Generator {
  public function __construct($name, $params) {
    $name = ucfirst($name);
    $this->files["test"] = true;
    $this->files["test/{$name}Test.php"] = <<<TEST
<?php

namespace Void;

require_once 'config/consts.php';
require_once 'autoload.php';

class {$name}Test extends \PHPUnit_Framework_TestCase {
  
  public function setUp() {
  }

  public function tearDown() {
  }
}

TEST;
  }
}

try {
  if(count($argv) > 2) {
    if(array_key_exists($argv[1], $generators)) {
      $generatorname = $generators[$argv[1]];
      $generator = new $generatorname($argv[2], @array_slice($argv, 3));
      $generator->generate();
    } else {
      throw new InvalidArgumentException("no such generator '{$argv[1]}'");
    }
  } else {
    echo HELP;
  }
} catch(Exception $ex) {
  echo "Error: {$ex->getMessage()}\n";
}
